{"version":3,"file":"CustomImage.jsx","sourceRoot":"","sources":["CustomImage.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAGjC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAElD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAQ5C,MAAM,CAAC,OAAO,UAAU,WAAW,CAAC,EAAyC;QAAzC,EAAE,SAAS,OAA8B,EAAzB,KAAK,cAArB,aAAuB,CAAF;IACvD,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChD,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,SAAS,EAAE,CAAC;YACd,SAAS,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC;QACD,uDAAuD;IACzD,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,OAAO,CACL,CAAC,IAAI,CACH,CAAC,CAAC,MAAM,CACR,CAAC,CAAC,MAAM,CACR,cAAc,CAAC,QAAQ,CACvB,UAAU,CAAC,QAAQ,CACnB,QAAQ,CAAC,UAAU,CAEnB;MAAA,CAAC,CAAC,QAAQ,IAAI,CACZ,CAAC,QAAQ,CACP,QAAQ,CAAC,UAAU,CACnB,GAAG,CAAC,GAAG,CACP,IAAI,CAAC,GAAG,CACR,MAAM,CAAC,MAAM,CACb,KAAK,CAAC,MAAM,EACZ,CACH,CACD;MAAA,CAAC,WAAW,CACV,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAChC,OAAO,CAAC,MAAM,CACd,QAAQ,CAAC,OAAO,CAChB,KAAK,CAAC,CAAC;YACL,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ;YAC3C,QAAQ,EAAE,UAAU;YACpB,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,CAAC;YACT,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;SACxC,CAAC,CACF,IAAI,KAAK,CAAC,EAEd;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { ComponentProps } from \"react\";\n\nimport { Flex, Skeleton } from \"@chakra-ui/react\";\n\nimport { MotionImage } from \"./MotionImage\";\n\ntype MotionImageProps = ComponentProps<typeof MotionImage>;\n\ninterface CustomImageProps extends MotionImageProps {\n  setMethod?: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default function CustomImage({ setMethod, ...props }: CustomImageProps) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    if (setMethod) {\n      setMethod(isLoaded);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isLoaded]);\n\n  return (\n    <Flex\n      h=\"100%\"\n      w=\"100%\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      position=\"relative\"\n    >\n      {!isLoaded && (\n        <Skeleton\n          position=\"absolute\"\n          top=\"0\"\n          left=\"0\"\n          height=\"100%\"\n          width=\"100%\"\n        />\n      )}\n      <MotionImage\n        onLoad={() => setIsLoaded(true)}\n        loading=\"lazy\"\n        decoding=\"async\"\n        style={{\n          visibility: isLoaded ? \"visible\" : \"hidden\",\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          zIndex: 1,\n          cursor: props.drag ? \"grab\" : \"default\",\n        }}\n        {...props}\n      />\n    </Flex>\n  );\n}\n"]}